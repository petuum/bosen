/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.petuum.petuum_ps;

public class petuumJNI {
  public final static native void delete_AbstractRow(long jarg1);
  public final static native void AbstractRow_Init(long jarg1, AbstractRow jarg1_, int jarg2);
  public final static native long AbstractRow_Clone(long jarg1, AbstractRow jarg1_);
  public final static native long AbstractRow_get_update_size(long jarg1, AbstractRow jarg1_);
  public final static native long AbstractRow_SerializedSize(long jarg1, AbstractRow jarg1_);
  public final static native long AbstractRow_Serialize(long jarg1, AbstractRow jarg1_, long jarg2);
  public final static native boolean AbstractRow_Deserialize(long jarg1, AbstractRow jarg1_, long jarg2, long jarg3);
  public final static native void AbstractRow_ApplyInc(long jarg1, AbstractRow jarg1_, int jarg2, long jarg3);
  public final static native void AbstractRow_ApplyBatchInc(long jarg1, AbstractRow jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native void AbstractRow_ApplyIncUnsafe(long jarg1, AbstractRow jarg1_, int jarg2, long jarg3);
  public final static native void AbstractRow_ApplyBatchIncUnsafe(long jarg1, AbstractRow jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native void AbstractRow_AddUpdates(long jarg1, AbstractRow jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native void AbstractRow_SubtractUpdates(long jarg1, AbstractRow jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native void AbstractRow_InitUpdate(long jarg1, AbstractRow jarg1_, int jarg2, long jarg3);
  public final static native long new_DenseIntRow();
  public final static native void delete_DenseIntRow(long jarg1);
  public final static native void DenseIntRow_Init(long jarg1, DenseIntRow jarg1_, int jarg2);
  public final static native long DenseIntRow_get_update_size(long jarg1, DenseIntRow jarg1_);
  public final static native long DenseIntRow_Clone(long jarg1, DenseIntRow jarg1_);
  public final static native long DenseIntRow_SerializedSize(long jarg1, DenseIntRow jarg1_);
  public final static native long DenseIntRow_Serialize(long jarg1, DenseIntRow jarg1_, long jarg2);
  public final static native boolean DenseIntRow_Deserialize(long jarg1, DenseIntRow jarg1_, long jarg2, long jarg3);
  public final static native void DenseIntRow_ApplyInc(long jarg1, DenseIntRow jarg1_, int jarg2, long jarg3);
  public final static native void DenseIntRow_ApplyBatchInc(long jarg1, DenseIntRow jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native void DenseIntRow_ApplyIncUnsafe(long jarg1, DenseIntRow jarg1_, int jarg2, long jarg3);
  public final static native void DenseIntRow_ApplyBatchIncUnsafe(long jarg1, DenseIntRow jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native void DenseIntRow_AddUpdates(long jarg1, DenseIntRow jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native void DenseIntRow_SubtractUpdates(long jarg1, DenseIntRow jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native void DenseIntRow_InitUpdate(long jarg1, DenseIntRow jarg1_, int jarg2, long jarg3);
  public final static native int DenseIntRow_get(long jarg1, DenseIntRow jarg1_, int jarg2);
  public final static native int DenseIntRow_get_capacity(long jarg1, DenseIntRow jarg1_);
  public final static native void DenseIntRow_CopyToVector(long jarg1, DenseIntRow jarg1_, long jarg2, VectorInt32 jarg2_);
  public final static native long new_DenseFloatRow();
  public final static native void delete_DenseFloatRow(long jarg1);
  public final static native void DenseFloatRow_Init(long jarg1, DenseFloatRow jarg1_, int jarg2);
  public final static native long DenseFloatRow_get_update_size(long jarg1, DenseFloatRow jarg1_);
  public final static native long DenseFloatRow_Clone(long jarg1, DenseFloatRow jarg1_);
  public final static native long DenseFloatRow_SerializedSize(long jarg1, DenseFloatRow jarg1_);
  public final static native long DenseFloatRow_Serialize(long jarg1, DenseFloatRow jarg1_, long jarg2);
  public final static native boolean DenseFloatRow_Deserialize(long jarg1, DenseFloatRow jarg1_, long jarg2, long jarg3);
  public final static native void DenseFloatRow_ApplyInc(long jarg1, DenseFloatRow jarg1_, int jarg2, long jarg3);
  public final static native void DenseFloatRow_ApplyBatchInc(long jarg1, DenseFloatRow jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native void DenseFloatRow_ApplyIncUnsafe(long jarg1, DenseFloatRow jarg1_, int jarg2, long jarg3);
  public final static native void DenseFloatRow_ApplyBatchIncUnsafe(long jarg1, DenseFloatRow jarg1_, long jarg2, long jarg3, int jarg4);
  public final static native void DenseFloatRow_AddUpdates(long jarg1, DenseFloatRow jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native void DenseFloatRow_SubtractUpdates(long jarg1, DenseFloatRow jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native void DenseFloatRow_InitUpdate(long jarg1, DenseFloatRow jarg1_, int jarg2, long jarg3);
  public final static native float DenseFloatRow_get(long jarg1, DenseFloatRow jarg1_, int jarg2);
  public final static native int DenseFloatRow_get_capacity(long jarg1, DenseFloatRow jarg1_);
  public final static native void DenseFloatRow_CopyToVector(long jarg1, DenseFloatRow jarg1_, long jarg2, VectorFloat jarg2_);
  public final static native long new_RowAccessor();
  public final static native void delete_RowAccessor(long jarg1);
  public final static native long RowAccessor_GetDenseIntRow(long jarg1, RowAccessor jarg1_);
  public final static native long RowAccessor_GetDenseFloatRow(long jarg1, RowAccessor jarg1_);
  public final static native long new_ThreadRowAccessor();
  public final static native void delete_ThreadRowAccessor(long jarg1);
  public final static native long new_UpdateBatchInt__SWIG_0();
  public final static native void delete_UpdateBatchInt(long jarg1);
  public final static native long new_UpdateBatchInt__SWIG_1(long jarg1, UpdateBatchInt jarg1_);
  public final static native void UpdateBatchInt_Update(long jarg1, UpdateBatchInt jarg1_, int jarg2, int jarg3);
  public final static native long UpdateBatchInt_GetColIDs(long jarg1, UpdateBatchInt jarg1_);
  public final static native long UpdateBatchInt_GetUpdates(long jarg1, UpdateBatchInt jarg1_);
  public final static native int UpdateBatchInt_GetBatchSize(long jarg1, UpdateBatchInt jarg1_);
  public final static native long new_UpdateBatchFloat__SWIG_0();
  public final static native void delete_UpdateBatchFloat(long jarg1);
  public final static native long new_UpdateBatchFloat__SWIG_1(long jarg1, UpdateBatchFloat jarg1_);
  public final static native void UpdateBatchFloat_Update(long jarg1, UpdateBatchFloat jarg1_, int jarg2, float jarg3);
  public final static native long UpdateBatchFloat_GetColIDs(long jarg1, UpdateBatchFloat jarg1_);
  public final static native long UpdateBatchFloat_GetUpdates(long jarg1, UpdateBatchFloat jarg1_);
  public final static native int UpdateBatchFloat_GetBatchSize(long jarg1, UpdateBatchFloat jarg1_);
  public final static native long new_TableInt__SWIG_0();
  public final static native long new_TableInt__SWIG_1(long jarg1, TableInt jarg1_);
  public final static native long TableInt_assign(long jarg1, TableInt jarg1_, long jarg2, TableInt jarg2_);
  public final static native void TableInt_GetAsync(long jarg1, TableInt jarg1_, int jarg2);
  public final static native void TableInt_WaitPendingAsyncGet(long jarg1, TableInt jarg1_);
  public final static native void TableInt_ThreadGet(long jarg1, TableInt jarg1_, int jarg2, long jarg3, ThreadRowAccessor jarg3_);
  public final static native void TableInt_ThreadInc(long jarg1, TableInt jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void TableInt_ThreadBatchInc(long jarg1, TableInt jarg1_, int jarg2, long jarg3, UpdateBatchInt jarg3_);
  public final static native void TableInt_Get(long jarg1, TableInt jarg1_, int jarg2, long jarg3, RowAccessor jarg3_);
  public final static native void TableInt_Inc(long jarg1, TableInt jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void TableInt_BatchInc(long jarg1, TableInt jarg1_, int jarg2, long jarg3, UpdateBatchInt jarg3_);
  public final static native int TableInt_get_row_type(long jarg1, TableInt jarg1_);
  public final static native void delete_TableInt(long jarg1);
  public final static native long new_TableFloat__SWIG_0();
  public final static native long new_TableFloat__SWIG_1(long jarg1, TableFloat jarg1_);
  public final static native long TableFloat_assign(long jarg1, TableFloat jarg1_, long jarg2, TableFloat jarg2_);
  public final static native void TableFloat_GetAsync(long jarg1, TableFloat jarg1_, int jarg2);
  public final static native void TableFloat_WaitPendingAsyncGet(long jarg1, TableFloat jarg1_);
  public final static native void TableFloat_ThreadGet(long jarg1, TableFloat jarg1_, int jarg2, long jarg3, ThreadRowAccessor jarg3_);
  public final static native void TableFloat_ThreadInc(long jarg1, TableFloat jarg1_, int jarg2, int jarg3, float jarg4);
  public final static native void TableFloat_ThreadBatchInc(long jarg1, TableFloat jarg1_, int jarg2, long jarg3, UpdateBatchFloat jarg3_);
  public final static native void TableFloat_Get(long jarg1, TableFloat jarg1_, int jarg2, long jarg3, RowAccessor jarg3_);
  public final static native void TableFloat_Inc(long jarg1, TableFloat jarg1_, int jarg2, int jarg3, float jarg4);
  public final static native void TableFloat_BatchInc(long jarg1, TableFloat jarg1_, int jarg2, long jarg3, UpdateBatchFloat jarg3_);
  public final static native int TableFloat_get_row_type(long jarg1, TableFloat jarg1_);
  public final static native void delete_TableFloat(long jarg1);
  public final static native long new_VectorInt32__SWIG_0();
  public final static native long new_VectorInt32__SWIG_1(long jarg1);
  public final static native long VectorInt32_size(long jarg1, VectorInt32 jarg1_);
  public final static native long VectorInt32_capacity(long jarg1, VectorInt32 jarg1_);
  public final static native void VectorInt32_reserve(long jarg1, VectorInt32 jarg1_, long jarg2);
  public final static native boolean VectorInt32_isEmpty(long jarg1, VectorInt32 jarg1_);
  public final static native void VectorInt32_clear(long jarg1, VectorInt32 jarg1_);
  public final static native void VectorInt32_add(long jarg1, VectorInt32 jarg1_, int jarg2);
  public final static native int VectorInt32_get(long jarg1, VectorInt32 jarg1_, int jarg2);
  public final static native void VectorInt32_set(long jarg1, VectorInt32 jarg1_, int jarg2, int jarg3);
  public final static native void delete_VectorInt32(long jarg1);
  public final static native long new_VectorFloat__SWIG_0();
  public final static native long new_VectorFloat__SWIG_1(long jarg1);
  public final static native long VectorFloat_size(long jarg1, VectorFloat jarg1_);
  public final static native long VectorFloat_capacity(long jarg1, VectorFloat jarg1_);
  public final static native void VectorFloat_reserve(long jarg1, VectorFloat jarg1_, long jarg2);
  public final static native boolean VectorFloat_isEmpty(long jarg1, VectorFloat jarg1_);
  public final static native void VectorFloat_clear(long jarg1, VectorFloat jarg1_);
  public final static native void VectorFloat_add(long jarg1, VectorFloat jarg1_, float jarg2);
  public final static native float VectorFloat_get(long jarg1, VectorFloat jarg1_, int jarg2);
  public final static native void VectorFloat_set(long jarg1, VectorFloat jarg1_, int jarg2, float jarg3);
  public final static native void delete_VectorFloat(long jarg1);
  public final static native int SSP_get();
  public final static native int SSPPush_get();
  public final static native int SSPPushValueBound_get();
  public final static native long new_TableGroupConfig();
  public final static native void TableGroupConfig_num_total_server_threads_set(long jarg1, TableGroupConfig jarg1_, int jarg2);
  public final static native int TableGroupConfig_num_total_server_threads_get(long jarg1, TableGroupConfig jarg1_);
  public final static native void TableGroupConfig_num_tables_set(long jarg1, TableGroupConfig jarg1_, int jarg2);
  public final static native int TableGroupConfig_num_tables_get(long jarg1, TableGroupConfig jarg1_);
  public final static native void TableGroupConfig_num_total_clients_set(long jarg1, TableGroupConfig jarg1_, int jarg2);
  public final static native int TableGroupConfig_num_total_clients_get(long jarg1, TableGroupConfig jarg1_);
  public final static native void TableGroupConfig_num_total_bg_threads_set(long jarg1, TableGroupConfig jarg1_, int jarg2);
  public final static native int TableGroupConfig_num_total_bg_threads_get(long jarg1, TableGroupConfig jarg1_);
  public final static native void TableGroupConfig_num_local_server_threads_set(long jarg1, TableGroupConfig jarg1_, int jarg2);
  public final static native int TableGroupConfig_num_local_server_threads_get(long jarg1, TableGroupConfig jarg1_);
  public final static native void TableGroupConfig_num_local_app_threads_set(long jarg1, TableGroupConfig jarg1_, int jarg2);
  public final static native int TableGroupConfig_num_local_app_threads_get(long jarg1, TableGroupConfig jarg1_);
  public final static native void TableGroupConfig_num_local_bg_threads_set(long jarg1, TableGroupConfig jarg1_, int jarg2);
  public final static native int TableGroupConfig_num_local_bg_threads_get(long jarg1, TableGroupConfig jarg1_);
  public final static native void TableGroupConfig_server_ids_set(long jarg1, TableGroupConfig jarg1_, long jarg2, VectorInt32 jarg2_);
  public final static native long TableGroupConfig_server_ids_get(long jarg1, TableGroupConfig jarg1_);
  public final static native void TableGroupConfig_host_map_set(long jarg1, TableGroupConfig jarg1_, long jarg2, MapInt32HostInfo jarg2_);
  public final static native long TableGroupConfig_host_map_get(long jarg1, TableGroupConfig jarg1_);
  public final static native void TableGroupConfig_client_id_set(long jarg1, TableGroupConfig jarg1_, int jarg2);
  public final static native int TableGroupConfig_client_id_get(long jarg1, TableGroupConfig jarg1_);
  public final static native void TableGroupConfig_aggressive_clock_set(long jarg1, TableGroupConfig jarg1_, boolean jarg2);
  public final static native boolean TableGroupConfig_aggressive_clock_get(long jarg1, TableGroupConfig jarg1_);
  public final static native void TableGroupConfig_consistency_model_set(long jarg1, TableGroupConfig jarg1_, int jarg2);
  public final static native int TableGroupConfig_consistency_model_get(long jarg1, TableGroupConfig jarg1_);
  public final static native void TableGroupConfig_aggressive_cpu_set(long jarg1, TableGroupConfig jarg1_, int jarg2);
  public final static native int TableGroupConfig_aggressive_cpu_get(long jarg1, TableGroupConfig jarg1_);
  public final static native void TableGroupConfig_server_ring_size_set(long jarg1, TableGroupConfig jarg1_, int jarg2);
  public final static native int TableGroupConfig_server_ring_size_get(long jarg1, TableGroupConfig jarg1_);
  public final static native void delete_TableGroupConfig(long jarg1);
  public final static native void TableInfo_table_staleness_set(long jarg1, TableInfo jarg1_, int jarg2);
  public final static native int TableInfo_table_staleness_get(long jarg1, TableInfo jarg1_);
  public final static native void TableInfo_row_type_set(long jarg1, TableInfo jarg1_, int jarg2);
  public final static native int TableInfo_row_type_get(long jarg1, TableInfo jarg1_);
  public final static native void TableInfo_row_capacity_set(long jarg1, TableInfo jarg1_, int jarg2);
  public final static native int TableInfo_row_capacity_get(long jarg1, TableInfo jarg1_);
  public final static native long new_TableInfo();
  public final static native void delete_TableInfo(long jarg1);
  public final static native void ClientTableConfig_table_info_set(long jarg1, ClientTableConfig jarg1_, long jarg2, TableInfo jarg2_);
  public final static native long ClientTableConfig_table_info_get(long jarg1, ClientTableConfig jarg1_);
  public final static native void ClientTableConfig_process_cache_capacity_set(long jarg1, ClientTableConfig jarg1_, int jarg2);
  public final static native int ClientTableConfig_process_cache_capacity_get(long jarg1, ClientTableConfig jarg1_);
  public final static native void ClientTableConfig_thread_cache_capacity_set(long jarg1, ClientTableConfig jarg1_, int jarg2);
  public final static native int ClientTableConfig_thread_cache_capacity_get(long jarg1, ClientTableConfig jarg1_);
  public final static native void ClientTableConfig_oplog_capacity_set(long jarg1, ClientTableConfig jarg1_, int jarg2);
  public final static native int ClientTableConfig_oplog_capacity_get(long jarg1, ClientTableConfig jarg1_);
  public final static native long new_ClientTableConfig();
  public final static native void delete_ClientTableConfig(long jarg1);
  public final static native int TableGroup_Init(long jarg1, TableGroupConfig jarg1_, boolean jarg2);
  public final static native void TableGroup_ShutDown();
  public final static native boolean TableGroup_CreateTable(int jarg1, long jarg2, ClientTableConfig jarg2_);
  public final static native void TableGroup_CreateTableDone();
  public final static native void TableGroup_WaitThreadRegister();
  public final static native int TableGroup_RegisterThread();
  public final static native void TableGroup_DeregisterThread();
  public final static native void TableGroup_Clock();
  public final static native void TableGroup_GlobalBarrier();
  public final static native void TableGroup_RegisterDenseIntRow(int jarg1);
  public final static native void TableGroup_RegisterDenseFloatRow(int jarg1);
  public final static native long TableGroup_GetTableOrDieInt(int jarg1);
  public final static native long TableGroup_GetTableOrDieFloat(int jarg1);
  public final static native long new_TableGroup();
  public final static native void delete_TableGroup(long jarg1);
  public final static native void HostInfo_id_set(long jarg1, HostInfo jarg1_, int jarg2);
  public final static native int HostInfo_id_get(long jarg1, HostInfo jarg1_);
  public final static native void HostInfo_ip_set(long jarg1, HostInfo jarg1_, String jarg2);
  public final static native String HostInfo_ip_get(long jarg1, HostInfo jarg1_);
  public final static native void HostInfo_port_set(long jarg1, HostInfo jarg1_, String jarg2);
  public final static native String HostInfo_port_get(long jarg1, HostInfo jarg1_);
  public final static native long new_HostInfo__SWIG_0();
  public final static native void delete_HostInfo(long jarg1);
  public final static native long new_HostInfo__SWIG_1(int jarg1, String jarg2, String jarg3);
  public final static native long new_HostInfo__SWIG_2(long jarg1, HostInfo jarg1_);
  public final static native void GetHostInfos(String jarg1, long jarg2, MapInt32HostInfo jarg2_);
  public final static native void GetServerIDsFromHostMap(long jarg1, VectorInt32 jarg1_, long jarg2, MapInt32HostInfo jarg2_);
  public final static native long new_MapInt32HostInfo__SWIG_0();
  public final static native long new_MapInt32HostInfo__SWIG_1(long jarg1, MapInt32HostInfo jarg1_);
  public final static native long MapInt32HostInfo_size(long jarg1, MapInt32HostInfo jarg1_);
  public final static native boolean MapInt32HostInfo_empty(long jarg1, MapInt32HostInfo jarg1_);
  public final static native void MapInt32HostInfo_clear(long jarg1, MapInt32HostInfo jarg1_);
  public final static native long MapInt32HostInfo_get(long jarg1, MapInt32HostInfo jarg1_, int jarg2);
  public final static native void MapInt32HostInfo_set(long jarg1, MapInt32HostInfo jarg1_, int jarg2, long jarg3, HostInfo jarg3_);
  public final static native void MapInt32HostInfo_del(long jarg1, MapInt32HostInfo jarg1_, int jarg2);
  public final static native boolean MapInt32HostInfo_has_key(long jarg1, MapInt32HostInfo jarg1_, int jarg2);
  public final static native void delete_MapInt32HostInfo(long jarg1);

    static {
        try {
            String path = System.getProperty("user.dir") + "/build/libs/libpetuum_ps.so";
            if(!new java.io.File(path).exists()) {
                path = System.getProperty("user.dir") + "libpetuum_ps.so";
            }
            if(new java.io.File(path).exists()) {
                System.load(path);
            } else {
                System.loadLibrary("petuum_ps");
            }

        } catch (UnsatisfiedLinkError e) {
            System.err.println("Native code library failed to load. \n" + e);
            System.exit(1);
        }
    }

  public final static native long DenseIntRow_SWIGUpcast(long jarg1);
  public final static native long DenseFloatRow_SWIGUpcast(long jarg1);
}
