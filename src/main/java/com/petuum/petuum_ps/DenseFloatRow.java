/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.petuum.petuum_ps;

public class DenseFloatRow extends AbstractRow {
  private long swigCPtr;

  protected DenseFloatRow(long cPtr, boolean cMemoryOwn) {
    super(petuumJNI.DenseFloatRow_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(DenseFloatRow obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        petuumJNI.delete_DenseFloatRow(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public DenseFloatRow() {
    this(petuumJNI.new_DenseFloatRow(), true);
  }

  public void Init(int capacity) {
    petuumJNI.DenseFloatRow_Init(swigCPtr, this, capacity);
  }

  public long get_update_size() {
    return petuumJNI.DenseFloatRow_get_update_size(swigCPtr, this);
  }

  public AbstractRow Clone() {
    long cPtr = petuumJNI.DenseFloatRow_Clone(swigCPtr, this);
    return (cPtr == 0) ? null : new AbstractRow(cPtr, false);
  }

  public long SerializedSize() {
    return petuumJNI.DenseFloatRow_SerializedSize(swigCPtr, this);
  }

  public long Serialize(SWIGTYPE_p_void bytes) {
    return petuumJNI.DenseFloatRow_Serialize(swigCPtr, this, SWIGTYPE_p_void.getCPtr(bytes));
  }

  public boolean Deserialize(SWIGTYPE_p_void data, long num_bytes) {
    return petuumJNI.DenseFloatRow_Deserialize(swigCPtr, this, SWIGTYPE_p_void.getCPtr(data), num_bytes);
  }

  public void ApplyInc(int column_id, SWIGTYPE_p_void update) {
    petuumJNI.DenseFloatRow_ApplyInc(swigCPtr, this, column_id, SWIGTYPE_p_void.getCPtr(update));
  }

  public void ApplyBatchInc(SWIGTYPE_p_int column_ids, SWIGTYPE_p_void update_batch, int num_updates) {
    petuumJNI.DenseFloatRow_ApplyBatchInc(swigCPtr, this, SWIGTYPE_p_int.getCPtr(column_ids), SWIGTYPE_p_void.getCPtr(update_batch), num_updates);
  }

  public void ApplyIncUnsafe(int column_id, SWIGTYPE_p_void update) {
    petuumJNI.DenseFloatRow_ApplyIncUnsafe(swigCPtr, this, column_id, SWIGTYPE_p_void.getCPtr(update));
  }

  public void ApplyBatchIncUnsafe(SWIGTYPE_p_int column_ids, SWIGTYPE_p_void update_batch, int num_updates) {
    petuumJNI.DenseFloatRow_ApplyBatchIncUnsafe(swigCPtr, this, SWIGTYPE_p_int.getCPtr(column_ids), SWIGTYPE_p_void.getCPtr(update_batch), num_updates);
  }

  public void AddUpdates(int column_id, SWIGTYPE_p_void update1, SWIGTYPE_p_void update2) {
    petuumJNI.DenseFloatRow_AddUpdates(swigCPtr, this, column_id, SWIGTYPE_p_void.getCPtr(update1), SWIGTYPE_p_void.getCPtr(update2));
  }

  public void SubtractUpdates(int column_id, SWIGTYPE_p_void update1, SWIGTYPE_p_void update2) {
    petuumJNI.DenseFloatRow_SubtractUpdates(swigCPtr, this, column_id, SWIGTYPE_p_void.getCPtr(update1), SWIGTYPE_p_void.getCPtr(update2));
  }

  public void InitUpdate(int column_id, SWIGTYPE_p_void update) {
    petuumJNI.DenseFloatRow_InitUpdate(swigCPtr, this, column_id, SWIGTYPE_p_void.getCPtr(update));
  }

  public float get(int column_id) {
    return petuumJNI.DenseFloatRow_get(swigCPtr, this, column_id);
  }

  public int get_capacity() {
    return petuumJNI.DenseFloatRow_get_capacity(swigCPtr, this);
  }

  public void CopyToVector(VectorFloat to) {
    petuumJNI.DenseFloatRow_CopyToVector(swigCPtr, this, VectorFloat.getCPtr(to), to);
  }

}
