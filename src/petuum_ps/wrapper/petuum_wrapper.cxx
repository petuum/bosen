/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <string>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


#include <glog/logging.h>
#include "petuum_ps/include/abstract_row.hpp"
#include "petuum_ps/storage/dense_row.hpp"


#include "petuum_ps/include/row_access.hpp"


#include "petuum_ps/include/table.hpp"

SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int32_t_Sg__get(std::vector< int32_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int32_t_Sg__set(std::vector< int32_t > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< float >::const_reference std_vector_Sl_float_Sg__get(std::vector< float > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_float_Sg__set(std::vector< float > *self,int i,std::vector< float >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include "petuum_ps/include/configs.hpp"
#include "petuum_ps/include/table_group.hpp"


#include "petuum_ps/include/host_info.hpp"


#include "petuum_ps/util/utils.hpp"

SWIGINTERN petuum::HostInfo const &std_map_Sl_int32_t_Sc_petuum_HostInfo_Sg__get(std::map< int32_t,petuum::HostInfo > *self,int const &key){
                std::map<int,petuum::HostInfo >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_int32_t_Sc_petuum_HostInfo_Sg__set(std::map< int32_t,petuum::HostInfo > *self,int const &key,petuum::HostInfo const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_int32_t_Sc_petuum_HostInfo_Sg__del(std::map< int32_t,petuum::HostInfo > *self,int const &key){
                std::map<int,petuum::HostInfo >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_int32_t_Sc_petuum_HostInfo_Sg__has_key(std::map< int32_t,petuum::HostInfo > *self,int const &key){
                std::map<int,petuum::HostInfo >::iterator i = self->find(key);
                return i != self->end();
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_delete_1AbstractRow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  petuum::AbstractRow *arg1 = (petuum::AbstractRow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(petuum::AbstractRow **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_AbstractRow_1Init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::AbstractRow *arg1 = (petuum::AbstractRow *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::AbstractRow **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->Init(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_AbstractRow_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::AbstractRow *arg1 = (petuum::AbstractRow *) 0 ;
  petuum::AbstractRow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::AbstractRow **)&jarg1; 
  result = (petuum::AbstractRow *)((petuum::AbstractRow const *)arg1)->Clone();
  *(petuum::AbstractRow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_AbstractRow_1get_1update_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::AbstractRow *arg1 = (petuum::AbstractRow *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::AbstractRow **)&jarg1; 
  result = ((petuum::AbstractRow const *)arg1)->get_update_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_AbstractRow_1SerializedSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::AbstractRow *arg1 = (petuum::AbstractRow *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::AbstractRow **)&jarg1; 
  result = ((petuum::AbstractRow const *)arg1)->SerializedSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_AbstractRow_1Serialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  petuum::AbstractRow *arg1 = (petuum::AbstractRow *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::AbstractRow **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = ((petuum::AbstractRow const *)arg1)->Serialize(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_petuum_petuum_1ps_petuumJNI_AbstractRow_1Deserialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  petuum::AbstractRow *arg1 = (petuum::AbstractRow *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::AbstractRow **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)(arg1)->Deserialize((void const *)arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_AbstractRow_1ApplyInc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  petuum::AbstractRow *arg1 = (petuum::AbstractRow *) 0 ;
  int32_t arg2 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::AbstractRow **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(void **)&jarg3; 
  (arg1)->ApplyInc(arg2,(void const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_AbstractRow_1ApplyBatchInc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  petuum::AbstractRow *arg1 = (petuum::AbstractRow *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  void *arg3 = (void *) 0 ;
  int32_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::AbstractRow **)&jarg1; 
  arg2 = *(int32_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (int32_t)jarg4; 
  (arg1)->ApplyBatchInc((int32_t const *)arg2,(void const *)arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_AbstractRow_1ApplyIncUnsafe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  petuum::AbstractRow *arg1 = (petuum::AbstractRow *) 0 ;
  int32_t arg2 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::AbstractRow **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(void **)&jarg3; 
  (arg1)->ApplyIncUnsafe(arg2,(void const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_AbstractRow_1ApplyBatchIncUnsafe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  petuum::AbstractRow *arg1 = (petuum::AbstractRow *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  void *arg3 = (void *) 0 ;
  int32_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::AbstractRow **)&jarg1; 
  arg2 = *(int32_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (int32_t)jarg4; 
  (arg1)->ApplyBatchIncUnsafe((int32_t const *)arg2,(void const *)arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_AbstractRow_1AddUpdates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  petuum::AbstractRow *arg1 = (petuum::AbstractRow *) 0 ;
  int32_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::AbstractRow **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = *(void **)&jarg4; 
  ((petuum::AbstractRow const *)arg1)->AddUpdates(arg2,arg3,(void const *)arg4);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_AbstractRow_1SubtractUpdates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  petuum::AbstractRow *arg1 = (petuum::AbstractRow *) 0 ;
  int32_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::AbstractRow **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = *(void **)&jarg4; 
  ((petuum::AbstractRow const *)arg1)->SubtractUpdates(arg2,arg3,(void const *)arg4);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_AbstractRow_1InitUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  petuum::AbstractRow *arg1 = (petuum::AbstractRow *) 0 ;
  int32_t arg2 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::AbstractRow **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(void **)&jarg3; 
  ((petuum::AbstractRow const *)arg1)->InitUpdate(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1DenseIntRow(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  petuum::DenseRow< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (petuum::DenseRow< int > *)new petuum::DenseRow< int >();
  *(petuum::DenseRow< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_delete_1DenseIntRow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  petuum::DenseRow< int > *arg1 = (petuum::DenseRow< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(petuum::DenseRow< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseIntRow_1Init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::DenseRow< int > *arg1 = (petuum::DenseRow< int > *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< int > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->Init(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseIntRow_1get_1update_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::DenseRow< int > *arg1 = (petuum::DenseRow< int > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< int > **)&jarg1; 
  result = ((petuum::DenseRow< int > const *)arg1)->get_update_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseIntRow_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::DenseRow< int > *arg1 = (petuum::DenseRow< int > *) 0 ;
  petuum::AbstractRow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< int > **)&jarg1; 
  result = (petuum::AbstractRow *)((petuum::DenseRow< int > const *)arg1)->Clone();
  *(petuum::AbstractRow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseIntRow_1SerializedSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::DenseRow< int > *arg1 = (petuum::DenseRow< int > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< int > **)&jarg1; 
  result = ((petuum::DenseRow< int > const *)arg1)->SerializedSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseIntRow_1Serialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  petuum::DenseRow< int > *arg1 = (petuum::DenseRow< int > *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< int > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = ((petuum::DenseRow< int > const *)arg1)->Serialize(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseIntRow_1Deserialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  petuum::DenseRow< int > *arg1 = (petuum::DenseRow< int > *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< int > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)(arg1)->Deserialize((void const *)arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseIntRow_1ApplyInc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  petuum::DenseRow< int > *arg1 = (petuum::DenseRow< int > *) 0 ;
  int32_t arg2 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< int > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(void **)&jarg3; 
  (arg1)->ApplyInc(arg2,(void const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseIntRow_1ApplyBatchInc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  petuum::DenseRow< int > *arg1 = (petuum::DenseRow< int > *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  void *arg3 = (void *) 0 ;
  int32_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< int > **)&jarg1; 
  arg2 = *(int32_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (int32_t)jarg4; 
  (arg1)->ApplyBatchInc((int32_t const *)arg2,(void const *)arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseIntRow_1ApplyIncUnsafe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  petuum::DenseRow< int > *arg1 = (petuum::DenseRow< int > *) 0 ;
  int32_t arg2 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< int > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(void **)&jarg3; 
  (arg1)->ApplyIncUnsafe(arg2,(void const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseIntRow_1ApplyBatchIncUnsafe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  petuum::DenseRow< int > *arg1 = (petuum::DenseRow< int > *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  void *arg3 = (void *) 0 ;
  int32_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< int > **)&jarg1; 
  arg2 = *(int32_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (int32_t)jarg4; 
  (arg1)->ApplyBatchIncUnsafe((int32_t const *)arg2,(void const *)arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseIntRow_1AddUpdates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  petuum::DenseRow< int > *arg1 = (petuum::DenseRow< int > *) 0 ;
  int32_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< int > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = *(void **)&jarg4; 
  ((petuum::DenseRow< int > const *)arg1)->AddUpdates(arg2,arg3,(void const *)arg4);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseIntRow_1SubtractUpdates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  petuum::DenseRow< int > *arg1 = (petuum::DenseRow< int > *) 0 ;
  int32_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< int > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = *(void **)&jarg4; 
  ((petuum::DenseRow< int > const *)arg1)->SubtractUpdates(arg2,arg3,(void const *)arg4);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseIntRow_1InitUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  petuum::DenseRow< int > *arg1 = (petuum::DenseRow< int > *) 0 ;
  int32_t arg2 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< int > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(void **)&jarg3; 
  ((petuum::DenseRow< int > const *)arg1)->InitUpdate(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseIntRow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  petuum::DenseRow< int > *arg1 = (petuum::DenseRow< int > *) 0 ;
  int32_t arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< int > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (int)((petuum::DenseRow< int > const *)arg1)->operator [](arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseIntRow_1get_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::DenseRow< int > *arg1 = (petuum::DenseRow< int > *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< int > **)&jarg1; 
  result = (int32_t)(arg1)->get_capacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseIntRow_1CopyToVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  petuum::DenseRow< int > *arg1 = (petuum::DenseRow< int > *) 0 ;
  std::vector< int > *arg2 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(petuum::DenseRow< int > **)&jarg1; 
  arg2 = *(std::vector< int > **)&jarg2; 
  ((petuum::DenseRow< int > const *)arg1)->CopyToVector(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1DenseFloatRow(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  petuum::DenseRow< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (petuum::DenseRow< float > *)new petuum::DenseRow< float >();
  *(petuum::DenseRow< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_delete_1DenseFloatRow(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  petuum::DenseRow< float > *arg1 = (petuum::DenseRow< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(petuum::DenseRow< float > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseFloatRow_1Init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::DenseRow< float > *arg1 = (petuum::DenseRow< float > *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< float > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->Init(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseFloatRow_1get_1update_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::DenseRow< float > *arg1 = (petuum::DenseRow< float > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< float > **)&jarg1; 
  result = ((petuum::DenseRow< float > const *)arg1)->get_update_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseFloatRow_1Clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::DenseRow< float > *arg1 = (petuum::DenseRow< float > *) 0 ;
  petuum::AbstractRow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< float > **)&jarg1; 
  result = (petuum::AbstractRow *)((petuum::DenseRow< float > const *)arg1)->Clone();
  *(petuum::AbstractRow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseFloatRow_1SerializedSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::DenseRow< float > *arg1 = (petuum::DenseRow< float > *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< float > **)&jarg1; 
  result = ((petuum::DenseRow< float > const *)arg1)->SerializedSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseFloatRow_1Serialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  petuum::DenseRow< float > *arg1 = (petuum::DenseRow< float > *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< float > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = ((petuum::DenseRow< float > const *)arg1)->Serialize(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseFloatRow_1Deserialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  petuum::DenseRow< float > *arg1 = (petuum::DenseRow< float > *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< float > **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)(arg1)->Deserialize((void const *)arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseFloatRow_1ApplyInc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  petuum::DenseRow< float > *arg1 = (petuum::DenseRow< float > *) 0 ;
  int32_t arg2 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< float > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(void **)&jarg3; 
  (arg1)->ApplyInc(arg2,(void const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseFloatRow_1ApplyBatchInc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  petuum::DenseRow< float > *arg1 = (petuum::DenseRow< float > *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  void *arg3 = (void *) 0 ;
  int32_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< float > **)&jarg1; 
  arg2 = *(int32_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (int32_t)jarg4; 
  (arg1)->ApplyBatchInc((int32_t const *)arg2,(void const *)arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseFloatRow_1ApplyIncUnsafe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  petuum::DenseRow< float > *arg1 = (petuum::DenseRow< float > *) 0 ;
  int32_t arg2 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< float > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(void **)&jarg3; 
  (arg1)->ApplyIncUnsafe(arg2,(void const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseFloatRow_1ApplyBatchIncUnsafe(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jint jarg4) {
  petuum::DenseRow< float > *arg1 = (petuum::DenseRow< float > *) 0 ;
  int32_t *arg2 = (int32_t *) 0 ;
  void *arg3 = (void *) 0 ;
  int32_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< float > **)&jarg1; 
  arg2 = *(int32_t **)&jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (int32_t)jarg4; 
  (arg1)->ApplyBatchIncUnsafe((int32_t const *)arg2,(void const *)arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseFloatRow_1AddUpdates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  petuum::DenseRow< float > *arg1 = (petuum::DenseRow< float > *) 0 ;
  int32_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< float > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = *(void **)&jarg4; 
  ((petuum::DenseRow< float > const *)arg1)->AddUpdates(arg2,arg3,(void const *)arg4);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseFloatRow_1SubtractUpdates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  petuum::DenseRow< float > *arg1 = (petuum::DenseRow< float > *) 0 ;
  int32_t arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< float > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = *(void **)&jarg4; 
  ((petuum::DenseRow< float > const *)arg1)->SubtractUpdates(arg2,arg3,(void const *)arg4);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseFloatRow_1InitUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  petuum::DenseRow< float > *arg1 = (petuum::DenseRow< float > *) 0 ;
  int32_t arg2 ;
  void *arg3 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< float > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(void **)&jarg3; 
  ((petuum::DenseRow< float > const *)arg1)->InitUpdate(arg2,arg3);
}


SWIGEXPORT jfloat JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseFloatRow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  petuum::DenseRow< float > *arg1 = (petuum::DenseRow< float > *) 0 ;
  int32_t arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< float > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  result = (float)((petuum::DenseRow< float > const *)arg1)->operator [](arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseFloatRow_1get_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::DenseRow< float > *arg1 = (petuum::DenseRow< float > *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::DenseRow< float > **)&jarg1; 
  result = (int32_t)(arg1)->get_capacity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseFloatRow_1CopyToVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  petuum::DenseRow< float > *arg1 = (petuum::DenseRow< float > *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(petuum::DenseRow< float > **)&jarg1; 
  arg2 = *(std::vector< float > **)&jarg2; 
  ((petuum::DenseRow< float > const *)arg1)->CopyToVector(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1RowAccessor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  petuum::RowAccessor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (petuum::RowAccessor *)new petuum::RowAccessor();
  *(petuum::RowAccessor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_delete_1RowAccessor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  petuum::RowAccessor *arg1 = (petuum::RowAccessor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(petuum::RowAccessor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_RowAccessor_1GetDenseIntRow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::RowAccessor *arg1 = (petuum::RowAccessor *) 0 ;
  petuum::DenseRow< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::RowAccessor **)&jarg1; 
  result = (petuum::DenseRow< int > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR Get< petuum::DenseRow< int > >();
  *(petuum::DenseRow< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_RowAccessor_1GetDenseFloatRow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::RowAccessor *arg1 = (petuum::RowAccessor *) 0 ;
  petuum::DenseRow< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::RowAccessor **)&jarg1; 
  result = (petuum::DenseRow< float > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR Get< petuum::DenseRow< float > >();
  *(petuum::DenseRow< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1ThreadRowAccessor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  petuum::ThreadRowAccessor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (petuum::ThreadRowAccessor *)new petuum::ThreadRowAccessor();
  *(petuum::ThreadRowAccessor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_delete_1ThreadRowAccessor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  petuum::ThreadRowAccessor *arg1 = (petuum::ThreadRowAccessor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(petuum::ThreadRowAccessor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1UpdateBatchInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  petuum::UpdateBatch< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (petuum::UpdateBatch< int > *)new petuum::UpdateBatch< int >();
  *(petuum::UpdateBatch< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_delete_1UpdateBatchInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  petuum::UpdateBatch< int > *arg1 = (petuum::UpdateBatch< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(petuum::UpdateBatch< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1UpdateBatchInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::UpdateBatch< int > *arg1 = 0 ;
  petuum::UpdateBatch< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::UpdateBatch< int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "petuum::UpdateBatch< int > const & reference is null");
    return 0;
  } 
  result = (petuum::UpdateBatch< int > *)new petuum::UpdateBatch< int >((petuum::UpdateBatch< int > const &)*arg1);
  *(petuum::UpdateBatch< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_UpdateBatchInt_1Update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  petuum::UpdateBatch< int > *arg1 = (petuum::UpdateBatch< int > *) 0 ;
  int32_t arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::UpdateBatch< int > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  (arg1)->Update(arg2,(int const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_UpdateBatchInt_1GetColIDs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::UpdateBatch< int > *arg1 = (petuum::UpdateBatch< int > *) 0 ;
  std::vector< int32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::UpdateBatch< int > **)&jarg1; 
  result = (std::vector< int32_t > *) &((petuum::UpdateBatch< int > const *)arg1)->GetColIDs();
  *(std::vector< int32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_UpdateBatchInt_1GetUpdates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::UpdateBatch< int > *arg1 = (petuum::UpdateBatch< int > *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::UpdateBatch< int > **)&jarg1; 
  result = (int *)((petuum::UpdateBatch< int > const *)arg1)->GetUpdates();
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_UpdateBatchInt_1GetBatchSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::UpdateBatch< int > *arg1 = (petuum::UpdateBatch< int > *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::UpdateBatch< int > **)&jarg1; 
  result = (int32_t)((petuum::UpdateBatch< int > const *)arg1)->GetBatchSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1UpdateBatchFloat_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  petuum::UpdateBatch< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (petuum::UpdateBatch< float > *)new petuum::UpdateBatch< float >();
  *(petuum::UpdateBatch< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_delete_1UpdateBatchFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  petuum::UpdateBatch< float > *arg1 = (petuum::UpdateBatch< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(petuum::UpdateBatch< float > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1UpdateBatchFloat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::UpdateBatch< float > *arg1 = 0 ;
  petuum::UpdateBatch< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::UpdateBatch< float > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "petuum::UpdateBatch< float > const & reference is null");
    return 0;
  } 
  result = (petuum::UpdateBatch< float > *)new petuum::UpdateBatch< float >((petuum::UpdateBatch< float > const &)*arg1);
  *(petuum::UpdateBatch< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_UpdateBatchFloat_1Update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  petuum::UpdateBatch< float > *arg1 = (petuum::UpdateBatch< float > *) 0 ;
  int32_t arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::UpdateBatch< float > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  (arg1)->Update(arg2,(float const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_UpdateBatchFloat_1GetColIDs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::UpdateBatch< float > *arg1 = (petuum::UpdateBatch< float > *) 0 ;
  std::vector< int32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::UpdateBatch< float > **)&jarg1; 
  result = (std::vector< int32_t > *) &((petuum::UpdateBatch< float > const *)arg1)->GetColIDs();
  *(std::vector< int32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_UpdateBatchFloat_1GetUpdates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::UpdateBatch< float > *arg1 = (petuum::UpdateBatch< float > *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::UpdateBatch< float > **)&jarg1; 
  result = (float *)((petuum::UpdateBatch< float > const *)arg1)->GetUpdates();
  *(float **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_UpdateBatchFloat_1GetBatchSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::UpdateBatch< float > *arg1 = (petuum::UpdateBatch< float > *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::UpdateBatch< float > **)&jarg1; 
  result = (int32_t)((petuum::UpdateBatch< float > const *)arg1)->GetBatchSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1TableInt_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  petuum::Table< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (petuum::Table< int > *)new petuum::Table< int >();
  *(petuum::Table< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1TableInt_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::Table< int > *arg1 = 0 ;
  petuum::Table< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::Table< int > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "petuum::Table< int > const & reference is null");
    return 0;
  } 
  result = (petuum::Table< int > *)new petuum::Table< int >((petuum::Table< int > const &)*arg1);
  *(petuum::Table< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableInt_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  petuum::Table< int > *arg1 = (petuum::Table< int > *) 0 ;
  petuum::Table< int > *arg2 = 0 ;
  petuum::Table< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(petuum::Table< int > **)&jarg1; 
  arg2 = *(petuum::Table< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "petuum::Table< int > const & reference is null");
    return 0;
  } 
  result = (petuum::Table< int > *) &(arg1)->operator =((petuum::Table< int > const &)*arg2);
  *(petuum::Table< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableInt_1GetAsync(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::Table< int > *arg1 = (petuum::Table< int > *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::Table< int > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->GetAsync(arg2);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableInt_1WaitPendingAsyncGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  petuum::Table< int > *arg1 = (petuum::Table< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::Table< int > **)&jarg1; 
  (arg1)->WaitPendingAsyncGet();
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableInt_1ThreadGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  petuum::Table< int > *arg1 = (petuum::Table< int > *) 0 ;
  int32_t arg2 ;
  petuum::ThreadRowAccessor *arg3 = (petuum::ThreadRowAccessor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(petuum::Table< int > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(petuum::ThreadRowAccessor **)&jarg3; 
  (arg1)->ThreadGet(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableInt_1ThreadInc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  petuum::Table< int > *arg1 = (petuum::Table< int > *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::Table< int > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->ThreadInc(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableInt_1ThreadBatchInc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  petuum::Table< int > *arg1 = (petuum::Table< int > *) 0 ;
  int32_t arg2 ;
  petuum::UpdateBatch< int > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(petuum::Table< int > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(petuum::UpdateBatch< int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "petuum::UpdateBatch< int > const & reference is null");
    return ;
  } 
  (arg1)->ThreadBatchInc(arg2,(petuum::UpdateBatch< int > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableInt_1Get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  petuum::Table< int > *arg1 = (petuum::Table< int > *) 0 ;
  int32_t arg2 ;
  petuum::RowAccessor *arg3 = (petuum::RowAccessor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(petuum::Table< int > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(petuum::RowAccessor **)&jarg3; 
  (arg1)->Get(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableInt_1Inc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  petuum::Table< int > *arg1 = (petuum::Table< int > *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::Table< int > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->Inc(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableInt_1BatchInc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  petuum::Table< int > *arg1 = (petuum::Table< int > *) 0 ;
  int32_t arg2 ;
  petuum::UpdateBatch< int > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(petuum::Table< int > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(petuum::UpdateBatch< int > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "petuum::UpdateBatch< int > const & reference is null");
    return ;
  } 
  (arg1)->BatchInc(arg2,(petuum::UpdateBatch< int > const &)*arg3);
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableInt_1get_1row_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::Table< int > *arg1 = (petuum::Table< int > *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::Table< int > **)&jarg1; 
  result = (int32_t)((petuum::Table< int > const *)arg1)->get_row_type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_delete_1TableInt(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  petuum::Table< int > *arg1 = (petuum::Table< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(petuum::Table< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1TableFloat_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  petuum::Table< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (petuum::Table< float > *)new petuum::Table< float >();
  *(petuum::Table< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1TableFloat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::Table< float > *arg1 = 0 ;
  petuum::Table< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::Table< float > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "petuum::Table< float > const & reference is null");
    return 0;
  } 
  result = (petuum::Table< float > *)new petuum::Table< float >((petuum::Table< float > const &)*arg1);
  *(petuum::Table< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableFloat_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  petuum::Table< float > *arg1 = (petuum::Table< float > *) 0 ;
  petuum::Table< float > *arg2 = 0 ;
  petuum::Table< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(petuum::Table< float > **)&jarg1; 
  arg2 = *(petuum::Table< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "petuum::Table< float > const & reference is null");
    return 0;
  } 
  result = (petuum::Table< float > *) &(arg1)->operator =((petuum::Table< float > const &)*arg2);
  *(petuum::Table< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableFloat_1GetAsync(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::Table< float > *arg1 = (petuum::Table< float > *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::Table< float > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->GetAsync(arg2);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableFloat_1WaitPendingAsyncGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  petuum::Table< float > *arg1 = (petuum::Table< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::Table< float > **)&jarg1; 
  (arg1)->WaitPendingAsyncGet();
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableFloat_1ThreadGet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  petuum::Table< float > *arg1 = (petuum::Table< float > *) 0 ;
  int32_t arg2 ;
  petuum::ThreadRowAccessor *arg3 = (petuum::ThreadRowAccessor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(petuum::Table< float > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(petuum::ThreadRowAccessor **)&jarg3; 
  (arg1)->ThreadGet(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableFloat_1ThreadInc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jfloat jarg4) {
  petuum::Table< float > *arg1 = (petuum::Table< float > *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  float arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::Table< float > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->ThreadInc(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableFloat_1ThreadBatchInc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  petuum::Table< float > *arg1 = (petuum::Table< float > *) 0 ;
  int32_t arg2 ;
  petuum::UpdateBatch< float > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(petuum::Table< float > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(petuum::UpdateBatch< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "petuum::UpdateBatch< float > const & reference is null");
    return ;
  } 
  (arg1)->ThreadBatchInc(arg2,(petuum::UpdateBatch< float > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableFloat_1Get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  petuum::Table< float > *arg1 = (petuum::Table< float > *) 0 ;
  int32_t arg2 ;
  petuum::RowAccessor *arg3 = (petuum::RowAccessor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(petuum::Table< float > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(petuum::RowAccessor **)&jarg3; 
  (arg1)->Get(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableFloat_1Inc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jfloat jarg4) {
  petuum::Table< float > *arg1 = (petuum::Table< float > *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  float arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::Table< float > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = (int32_t)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->Inc(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableFloat_1BatchInc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  petuum::Table< float > *arg1 = (petuum::Table< float > *) 0 ;
  int32_t arg2 ;
  petuum::UpdateBatch< float > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(petuum::Table< float > **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  arg3 = *(petuum::UpdateBatch< float > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "petuum::UpdateBatch< float > const & reference is null");
    return ;
  } 
  (arg1)->BatchInc(arg2,(petuum::UpdateBatch< float > const &)*arg3);
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableFloat_1get_1row_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::Table< float > *arg1 = (petuum::Table< float > *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::Table< float > **)&jarg1; 
  result = (int32_t)((petuum::Table< float > const *)arg1)->get_row_type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_delete_1TableFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  petuum::Table< float > *arg1 = (petuum::Table< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(petuum::Table< float > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1VectorInt32_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int32_t > *)new std::vector< int32_t >();
  *(std::vector< int32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1VectorInt32_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< int32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  result = (std::vector< int32_t > *)new std::vector< int32_t >(arg1);
  *(std::vector< int32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_VectorInt32_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  result = ((std::vector< int32_t > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_VectorInt32_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  result = ((std::vector< int32_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_VectorInt32_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_petuum_petuum_1ps_petuumJNI_VectorInt32_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  result = (bool)((std::vector< int32_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_VectorInt32_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_VectorInt32_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_VectorInt32_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int32_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_VectorInt32_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int32_t_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_delete_1VectorInt32(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1VectorFloat_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< float > *)new std::vector< float >();
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1VectorFloat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< float >::size_type arg1 ;
  std::vector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< float >::size_type)jarg1; 
  result = (std::vector< float > *)new std::vector< float >(arg1);
  *(std::vector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_VectorFloat_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  result = ((std::vector< float > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_VectorFloat_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  result = ((std::vector< float > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_VectorFloat_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (std::vector< float >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_petuum_petuum_1ps_petuumJNI_VectorFloat_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  result = (bool)((std::vector< float > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_VectorFloat_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_VectorFloat_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;
  std::vector< float >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  temp2 = (std::vector< float >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< float >::value_type const &)*arg2);
}


SWIGEXPORT jfloat JNICALL Java_com_petuum_petuum_1ps_petuumJNI_VectorFloat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< float >::value_type *) &std_vector_Sl_float_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jfloat)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_VectorFloat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  int arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  std::vector< float >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< float > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< float >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_float_Sg__set(arg1,arg2,(float const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_delete_1VectorFloat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< float > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_SSP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  petuum::ConsistencyModel result;
  
  (void)jenv;
  (void)jcls;
  result = (petuum::ConsistencyModel)petuum::SSP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_SSPPush_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  petuum::ConsistencyModel result;
  
  (void)jenv;
  (void)jcls;
  result = (petuum::ConsistencyModel)petuum::SSPPush;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_SSPPushValueBound_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  petuum::ConsistencyModel result;
  
  (void)jenv;
  (void)jcls;
  result = (petuum::ConsistencyModel)petuum::SSPPushValueBound;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1TableGroupConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  petuum::TableGroupConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (petuum::TableGroupConfig *)new petuum::TableGroupConfig();
  *(petuum::TableGroupConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1num_1total_1server_1threads_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->num_total_server_threads = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1num_1total_1server_1threads_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  result = (int32_t) ((arg1)->num_total_server_threads);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1num_1tables_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->num_tables = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1num_1tables_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  result = (int32_t) ((arg1)->num_tables);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1num_1total_1clients_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->num_total_clients = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1num_1total_1clients_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  result = (int32_t) ((arg1)->num_total_clients);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1num_1total_1bg_1threads_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->num_total_bg_threads = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1num_1total_1bg_1threads_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  result = (int32_t) ((arg1)->num_total_bg_threads);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1num_1local_1server_1threads_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->num_local_server_threads = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1num_1local_1server_1threads_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  result = (int32_t) ((arg1)->num_local_server_threads);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1num_1local_1app_1threads_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->num_local_app_threads = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1num_1local_1app_1threads_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  result = (int32_t) ((arg1)->num_local_app_threads);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1num_1local_1bg_1threads_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->num_local_bg_threads = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1num_1local_1bg_1threads_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  result = (int32_t) ((arg1)->num_local_bg_threads);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1server_1ids_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  std::vector< int32_t > *arg2 = (std::vector< int32_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  arg2 = *(std::vector< int32_t > **)&jarg2; 
  if (arg1) (arg1)->server_ids = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1server_1ids_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  std::vector< int32_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  result = (std::vector< int32_t > *)& ((arg1)->server_ids);
  *(std::vector< int32_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1host_1map_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  std::map< int32_t,petuum::HostInfo > *arg2 = (std::map< int32_t,petuum::HostInfo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  arg2 = *(std::map< int32_t,petuum::HostInfo > **)&jarg2; 
  if (arg1) (arg1)->host_map = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1host_1map_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  std::map< int32_t,petuum::HostInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  result = (std::map< int32_t,petuum::HostInfo > *)& ((arg1)->host_map);
  *(std::map< int32_t,petuum::HostInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1client_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->client_id = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1client_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  result = (int32_t) ((arg1)->client_id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1aggressive_1clock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->aggressive_clock = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1aggressive_1clock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  result = (bool) ((arg1)->aggressive_clock);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1consistency_1model_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  petuum::ConsistencyModel arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  arg2 = (petuum::ConsistencyModel)jarg2; 
  if (arg1) (arg1)->consistency_model = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1consistency_1model_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  petuum::ConsistencyModel result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  result = (petuum::ConsistencyModel) ((arg1)->consistency_model);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1aggressive_1cpu_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->aggressive_cpu = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1aggressive_1cpu_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  result = (int32_t) ((arg1)->aggressive_cpu);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1server_1ring_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->server_ring_size = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroupConfig_1server_1ring_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  result = (int32_t) ((arg1)->server_ring_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_delete_1TableGroupConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  petuum::TableGroupConfig *arg1 = (petuum::TableGroupConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(petuum::TableGroupConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableInfo_1table_1staleness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::TableInfo *arg1 = (petuum::TableInfo *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableInfo **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->table_staleness = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableInfo_1table_1staleness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::TableInfo *arg1 = (petuum::TableInfo *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableInfo **)&jarg1; 
  result = (int32_t) ((arg1)->table_staleness);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableInfo_1row_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::TableInfo *arg1 = (petuum::TableInfo *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableInfo **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->row_type = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableInfo_1row_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::TableInfo *arg1 = (petuum::TableInfo *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableInfo **)&jarg1; 
  result = (int32_t) ((arg1)->row_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableInfo_1row_1capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::TableInfo *arg1 = (petuum::TableInfo *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableInfo **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->row_capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableInfo_1row_1capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::TableInfo *arg1 = (petuum::TableInfo *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableInfo **)&jarg1; 
  result = (int32_t) ((arg1)->row_capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1TableInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  petuum::TableInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (petuum::TableInfo *)new petuum::TableInfo();
  *(petuum::TableInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_delete_1TableInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  petuum::TableInfo *arg1 = (petuum::TableInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(petuum::TableInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_ClientTableConfig_1table_1info_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  petuum::ClientTableConfig *arg1 = (petuum::ClientTableConfig *) 0 ;
  petuum::TableInfo *arg2 = (petuum::TableInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(petuum::ClientTableConfig **)&jarg1; 
  arg2 = *(petuum::TableInfo **)&jarg2; 
  if (arg1) (arg1)->table_info = *arg2;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_ClientTableConfig_1table_1info_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::ClientTableConfig *arg1 = (petuum::ClientTableConfig *) 0 ;
  petuum::TableInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::ClientTableConfig **)&jarg1; 
  result = (petuum::TableInfo *)& ((arg1)->table_info);
  *(petuum::TableInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_ClientTableConfig_1process_1cache_1capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::ClientTableConfig *arg1 = (petuum::ClientTableConfig *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::ClientTableConfig **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->process_cache_capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_ClientTableConfig_1process_1cache_1capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::ClientTableConfig *arg1 = (petuum::ClientTableConfig *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::ClientTableConfig **)&jarg1; 
  result = (int32_t) ((arg1)->process_cache_capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_ClientTableConfig_1thread_1cache_1capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::ClientTableConfig *arg1 = (petuum::ClientTableConfig *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::ClientTableConfig **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->thread_cache_capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_ClientTableConfig_1thread_1cache_1capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::ClientTableConfig *arg1 = (petuum::ClientTableConfig *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::ClientTableConfig **)&jarg1; 
  result = (int32_t) ((arg1)->thread_cache_capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_ClientTableConfig_1oplog_1capacity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::ClientTableConfig *arg1 = (petuum::ClientTableConfig *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::ClientTableConfig **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->oplog_capacity = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_ClientTableConfig_1oplog_1capacity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::ClientTableConfig *arg1 = (petuum::ClientTableConfig *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::ClientTableConfig **)&jarg1; 
  result = (int32_t) ((arg1)->oplog_capacity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1ClientTableConfig(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  petuum::ClientTableConfig *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (petuum::ClientTableConfig *)new petuum::ClientTableConfig();
  *(petuum::ClientTableConfig **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_delete_1ClientTableConfig(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  petuum::ClientTableConfig *arg1 = (petuum::ClientTableConfig *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(petuum::ClientTableConfig **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroup_1Init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  petuum::TableGroupConfig *arg1 = 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::TableGroupConfig **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "petuum::TableGroupConfig const & reference is null");
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (int)petuum::TableGroup::Init((petuum::TableGroupConfig const &)*arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroup_1ShutDown(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  petuum::TableGroup::ShutDown();
}


SWIGEXPORT jboolean JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroup_1CreateTable(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  int32_t arg1 ;
  petuum::ClientTableConfig *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int32_t)jarg1; 
  arg2 = *(petuum::ClientTableConfig **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "petuum::ClientTableConfig const & reference is null");
    return 0;
  } 
  result = (bool)petuum::TableGroup::CreateTable(arg1,(petuum::ClientTableConfig const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroup_1CreateTableDone(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  petuum::TableGroup::CreateTableDone();
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroup_1WaitThreadRegister(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  petuum::TableGroup::WaitThreadRegister();
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroup_1RegisterThread(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  result = (int32_t)petuum::TableGroup::RegisterThread();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroup_1DeregisterThread(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  petuum::TableGroup::DeregisterThread();
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroup_1Clock(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  petuum::TableGroup::Clock();
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroup_1GlobalBarrier(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  petuum::TableGroup::GlobalBarrier();
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroup_1RegisterDenseIntRow(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int32_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  petuum::TableGroup::SWIGTEMPLATEDISAMBIGUATOR RegisterRow< petuum::DenseRow< int > >(arg1);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroup_1RegisterDenseFloatRow(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int32_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  petuum::TableGroup::SWIGTEMPLATEDISAMBIGUATOR RegisterRow< petuum::DenseRow< float > >(arg1);
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroup_1GetTableOrDieInt(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int32_t arg1 ;
  petuum::Table< int > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  result = petuum::TableGroup::SWIGTEMPLATEDISAMBIGUATOR GetTableOrDie< int >(arg1);
  *(petuum::Table< int > **)&jresult = new petuum::Table< int >((const petuum::Table< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_TableGroup_1GetTableOrDieFloat(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int32_t arg1 ;
  petuum::Table< float > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  result = petuum::TableGroup::SWIGTEMPLATEDISAMBIGUATOR GetTableOrDie< float >(arg1);
  *(petuum::Table< float > **)&jresult = new petuum::Table< float >((const petuum::Table< float > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1TableGroup(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  petuum::TableGroup *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (petuum::TableGroup *)new petuum::TableGroup();
  *(petuum::TableGroup **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_delete_1TableGroup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  petuum::TableGroup *arg1 = (petuum::TableGroup *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(petuum::TableGroup **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_HostInfo_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  petuum::HostInfo *arg1 = (petuum::HostInfo *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::HostInfo **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_com_petuum_petuum_1ps_petuumJNI_HostInfo_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  petuum::HostInfo *arg1 = (petuum::HostInfo *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::HostInfo **)&jarg1; 
  result = (int32_t) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_HostInfo_1ip_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  petuum::HostInfo *arg1 = (petuum::HostInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::HostInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ip = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_petuum_petuum_1ps_petuumJNI_HostInfo_1ip_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  petuum::HostInfo *arg1 = (petuum::HostInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::HostInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->ip);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_HostInfo_1port_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  petuum::HostInfo *arg1 = (petuum::HostInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::HostInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->port = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_petuum_petuum_1ps_petuumJNI_HostInfo_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  petuum::HostInfo *arg1 = (petuum::HostInfo *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::HostInfo **)&jarg1; 
  result = (std::string *) & ((arg1)->port);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1HostInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  petuum::HostInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (petuum::HostInfo *)new petuum::HostInfo();
  *(petuum::HostInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_delete_1HostInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  petuum::HostInfo *arg1 = (petuum::HostInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(petuum::HostInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1HostInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  int32_t arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  petuum::HostInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int32_t)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (petuum::HostInfo *)new petuum::HostInfo(arg1,arg2,arg3);
  *(petuum::HostInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1HostInfo_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  petuum::HostInfo *arg1 = 0 ;
  petuum::HostInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(petuum::HostInfo **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "petuum::HostInfo const & reference is null");
    return 0;
  } 
  result = (petuum::HostInfo *)new petuum::HostInfo((petuum::HostInfo const &)*arg1);
  *(petuum::HostInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_GetHostInfos(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  std::string arg1 ;
  std::map< int32_t,petuum::HostInfo > *arg2 = (std::map< int32_t,petuum::HostInfo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::map< int32_t,petuum::HostInfo > **)&jarg2; 
  petuum::GetHostInfos(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_GetServerIDsFromHostMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< int32_t > *arg1 = (std::vector< int32_t > *) 0 ;
  std::map< int32_t,petuum::HostInfo > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< int32_t > **)&jarg1; 
  arg2 = *(std::map< int32_t,petuum::HostInfo > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int32_t,petuum::HostInfo > const & reference is null");
    return ;
  } 
  petuum::GetServerIDsFromHostMap(arg1,(std::map< int,petuum::HostInfo > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1MapInt32HostInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< int32_t,petuum::HostInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< int32_t,petuum::HostInfo > *)new std::map< int32_t,petuum::HostInfo >();
  *(std::map< int32_t,petuum::HostInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_new_1MapInt32HostInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int,petuum::HostInfo > *arg1 = 0 ;
  std::map< int32_t,petuum::HostInfo > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int,petuum::HostInfo > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< int,petuum::HostInfo > const & reference is null");
    return 0;
  } 
  result = (std::map< int32_t,petuum::HostInfo > *)new std::map< int32_t,petuum::HostInfo >((std::map< int,petuum::HostInfo > const &)*arg1);
  *(std::map< int32_t,petuum::HostInfo > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_MapInt32HostInfo_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< int32_t,petuum::HostInfo > *arg1 = (std::map< int32_t,petuum::HostInfo > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int32_t,petuum::HostInfo > **)&jarg1; 
  result = (unsigned int)((std::map< int32_t,petuum::HostInfo > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_petuum_petuum_1ps_petuumJNI_MapInt32HostInfo_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< int32_t,petuum::HostInfo > *arg1 = (std::map< int32_t,petuum::HostInfo > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int32_t,petuum::HostInfo > **)&jarg1; 
  result = (bool)((std::map< int32_t,petuum::HostInfo > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_MapInt32HostInfo_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< int32_t,petuum::HostInfo > *arg1 = (std::map< int32_t,petuum::HostInfo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int32_t,petuum::HostInfo > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_MapInt32HostInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::map< int32_t,petuum::HostInfo > *arg1 = (std::map< int32_t,petuum::HostInfo > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  petuum::HostInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int32_t,petuum::HostInfo > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    result = (petuum::HostInfo *) &std_map_Sl_int32_t_Sc_petuum_HostInfo_Sg__get(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(petuum::HostInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_MapInt32HostInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::map< int32_t,petuum::HostInfo > *arg1 = (std::map< int32_t,petuum::HostInfo > *) 0 ;
  int *arg2 = 0 ;
  petuum::HostInfo *arg3 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::map< int32_t,petuum::HostInfo > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  arg3 = *(petuum::HostInfo **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "petuum::HostInfo const & reference is null");
    return ;
  } 
  std_map_Sl_int32_t_Sc_petuum_HostInfo_Sg__set(arg1,(int const &)*arg2,(petuum::HostInfo const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_MapInt32HostInfo_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::map< int32_t,petuum::HostInfo > *arg1 = (std::map< int32_t,petuum::HostInfo > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int32_t,petuum::HostInfo > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  try {
    std_map_Sl_int32_t_Sc_petuum_HostInfo_Sg__del(arg1,(int const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_com_petuum_petuum_1ps_petuumJNI_MapInt32HostInfo_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::map< int32_t,petuum::HostInfo > *arg1 = (std::map< int32_t,petuum::HostInfo > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< int32_t,petuum::HostInfo > **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_map_Sl_int32_t_Sc_petuum_HostInfo_Sg__has_key(arg1,(int const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_petuum_petuum_1ps_petuumJNI_delete_1MapInt32HostInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< int32_t,petuum::HostInfo > *arg1 = (std::map< int32_t,petuum::HostInfo > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< int32_t,petuum::HostInfo > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseIntRow_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(petuum::AbstractRow **)&baseptr = *(petuum::DenseRow< int > **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_petuum_petuum_1ps_petuumJNI_DenseFloatRow_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(petuum::AbstractRow **)&baseptr = *(petuum::DenseRow< float > **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

